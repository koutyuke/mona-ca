diff --git a/dist/universal/file.mjs b/dist/universal/file.mjs
index 8217f4ac6a5885c0304925eb2126339eacc58229..ba8a52bb64d3de53293b169fe2c3e4a80961e31d 100644
--- a/dist/universal/file.mjs
+++ b/dist/universal/file.mjs
@@ -1,4 +1,4 @@
-import{ isBun }from"./utils.mjs";
+import { isBun } from "./utils.mjs";
 const mime = {
   aac: "audio/aac",
   abw: "application/x-abiword",
@@ -74,7 +74,7 @@ const mime = {
   "3gp_DOES_NOT_CONTAIN_VIDEO": "audio/3gpp",
   "3gp2": "video/3gpp2",
   "3gp2_DOES_NOT_CONTAIN_VIDEO": "audio/3gpp2",
-  "7z": "application/x-7z-compressed"
+  "7z": "application/x-7z-compressed",
 };
 const getFileExtension = (path) => {
   const index = path.lastIndexOf(".");
@@ -94,16 +94,15 @@ class ElysiaFile {
       } else {
         if (!createReadStream || !stat) {
           try {
-            this.value = import("fs").then((fs) => {
+            this.value = import("node:fs").then((fs) => {
               createReadStream = fs.createReadStream;
               return fs.createReadStream(path);
             });
-            this.stats = import("fs/promises").then((fs) => {
+            this.stats = import("node:fs/promises").then((fs) => {
               stat = fs.stat;
               return fs.stat(path);
             });
-          } catch {
-          }
+          } catch {}
         } else {
           this.value = createReadStream(path);
           this.stats = stat(path);
@@ -122,9 +121,4 @@ class ElysiaFile {
     return this.stats?.then((x) => x.size) ?? 0;
   }
 }
-export {
-  ElysiaFile,
-  file,
-  getFileExtension,
-  mime
-};
+export { ElysiaFile, file, getFileExtension, mime };
diff --git a/dist/utils.mjs b/dist/utils.mjs
index 6090345937c3e3a6e004ec4b263d49466a477f2d..3fa4514f55c132b41750c9f805d14cb1a5ef62fb 100644
--- a/dist/utils.mjs
+++ b/dist/utils.mjs
@@ -1,47 +1,39 @@
-import {
-  Kind,
-  TransformKind
-} from "@sinclair/typebox";
+import { Kind, TransformKind } from "@sinclair/typebox";
 import { Value } from "@sinclair/typebox/value";
 import { TypeCompiler } from "@sinclair/typebox/compiler";
-import{ t }from"./type-system.mjs";
-import{ mapValueError }from"./error.mjs";
+import { t } from "./type-system.mjs";
+import { mapValueError } from "./error.mjs";
 const hasHeaderShorthand = "toJSON" in new Headers();
 const replaceUrlPath = (url, pathname) => {
   const urlObject = new URL(url);
   urlObject.pathname = pathname;
   return urlObject.toString();
 };
-const isClass = (v) => typeof v === "function" && /^\s*class\s+/.test(v.toString()) || // Handle Object.create(null)
-v.toString && // Handle import * as Sentry from '@sentry/bun'
-// This also handle [object Date], [object Array]
-// and FFI value like [object Prisma]
-v.toString().startsWith("[object ") && v.toString() !== "[object Object]" || // If object prototype is not pure, then probably a class-like object
-isNotEmpty(Object.getPrototypeOf(v));
-const isObject = (item) => item && typeof item === "object" && !Array.isArray(item);
-const mergeDeep = (target, source, {
-  skipKeys,
-  override = true
-} = {}) => {
+const isClass = (v) =>
+  (typeof v === "function" && /^\s*class\s+/.test(v.toString())) || // Handle Object.create(null)
+  (v.toString && // Handle import * as Sentry from '@sentry/bun'
+    // This also handle [object Date], [object Array]
+    // and FFI value like [object Prisma]
+    v.toString().startsWith("[object ") &&
+    v.toString() !== "[object Object]") || // If object prototype is not pure, then probably a class-like object
+  isNotEmpty(Object.getPrototypeOf(v));
+const isObject = (item) =>
+  item && typeof item === "object" && !Array.isArray(item);
+const mergeDeep = (target, source, { skipKeys, override = true } = {}) => {
   if (!isObject(target) || !isObject(source)) return target;
   for (const [key, value] of Object.entries(source)) {
     if (skipKeys?.includes(key)) continue;
     if (!isObject(value) || !(key in target) || isClass(value)) {
-      if (override || !(key in target))
-        target[key] = value;
+      if (override || !(key in target)) target[key] = value;
       continue;
     }
-    target[key] = mergeDeep(
-      target[key],
-      value,
-      { skipKeys, override }
-    );
+    target[key] = mergeDeep(target[key], value, { skipKeys, override });
   }
   return target;
 };
 const mergeCookie = (a, b) => {
   const v = mergeDeep(Object.assign({}, a), b, {
-    skipKeys: ["properties"]
+    skipKeys: ["properties"],
   });
   if ("properties" in v) delete v.properties;
   return v;
@@ -80,14 +72,15 @@ const primitiveHooks = [
   "query",
   "response",
   "type",
-  "detail"
+  "detail",
 ];
 const primitiveHookMap = primitiveHooks.reduce(
-  (acc, x) => (acc[x] = true, acc),
+  (acc, x) => ((acc[x] = true), acc),
   {}
 );
 const mergeResponse = (a, b) => {
-  const isRecordNumber = (x) => typeof x === "object" && Object.keys(x).every(isNumericString);
+  const isRecordNumber = (x) =>
+    typeof x === "object" && Object.keys(x).every(isNumericString);
   if (isRecordNumber(a) && isRecordNumber(b)) return Object.assign(a, b);
   else if (a && !isRecordNumber(a) && isRecordNumber(b))
     return Object.assign({ 200: a }, b);
@@ -106,7 +99,7 @@ const mergeSchemaValidator = (a, b) => {
       a?.response,
       // @ts-ignore
       b?.response
-    )
+    ),
   };
 };
 const mergeHook = (a, b) => {
@@ -143,23 +136,14 @@ const mergeHook = (a, b) => {
     parse: mergeObjectArray(a?.parse, b?.parse),
     transform: mergeObjectArray(a?.transform, b?.transform),
     beforeHandle: mergeObjectArray(
-      mergeObjectArray(
-        fnToContainer(resolveA, "resolve"),
-        a?.beforeHandle
-      ),
-      mergeObjectArray(
-        fnToContainer(resolveB, "resolve"),
-        b?.beforeHandle
-      )
+      mergeObjectArray(fnToContainer(resolveA, "resolve"), a?.beforeHandle),
+      mergeObjectArray(fnToContainer(resolveB, "resolve"), b?.beforeHandle)
     ),
     afterHandle: mergeObjectArray(a?.afterHandle, b?.afterHandle),
     mapResponse: mergeObjectArray(a?.mapResponse, b?.mapResponse),
-    afterResponse: mergeObjectArray(
-      a?.afterResponse,
-      b?.afterResponse
-    ),
+    afterResponse: mergeObjectArray(a?.afterResponse, b?.afterResponse),
     trace: mergeObjectArray(a?.trace, b?.trace),
-    error: mergeObjectArray(a?.error, b?.error)
+    error: mergeObjectArray(a?.error, b?.error),
   };
 };
 const replaceSchemaType = (schema, options, root = true) => {
@@ -196,7 +180,15 @@ const _replaceSchemaType = (schema, options, root = true) => {
   if (schema.not) return _replaceSchemaType(schema.not, options, root);
   const isRoot = root && !!options.excludeRoot;
   if (schema[Kind] === fromSymbol) {
-    const { anyOf, oneOf, allOf, not, properties: properties2, items, ...rest } = schema;
+    const {
+      anyOf,
+      oneOf,
+      allOf,
+      not,
+      properties: properties2,
+      items,
+      ...rest
+    } = schema;
     const to = options.to(rest);
     if (!to) return schema;
     let transform;
@@ -204,36 +196,40 @@ const _replaceSchemaType = (schema, options, root = true) => {
       if (properties2 && v.type === "object") {
         const newProperties = {};
         for (const [key, value2] of Object.entries(properties2))
-          newProperties[key] = _replaceSchemaType(
-            value2,
-            options,
-            false
-          );
+          newProperties[key] = _replaceSchemaType(value2, options, false);
         return {
           ...rest,
           ...v,
-          properties: newProperties
+          properties: newProperties,
         };
       }
       if (items && v.type === "array")
         return {
           ...rest,
           ...v,
-          items: _replaceSchemaType(items, options, false)
+          items: _replaceSchemaType(items, options, false),
         };
       const value = {
         ...rest,
-        ...v
+        ...v,
       };
       delete value["required"];
-      if (properties2 && v.type === "string" && v.format === "ObjectString" && v.default === "{}") {
+      if (
+        properties2 &&
+        v.type === "string" &&
+        v.format === "ObjectString" &&
+        v.default === "{}"
+      ) {
         transform = t.ObjectString(properties2, rest);
-        value.default = JSON.stringify(
-          Value.Create(t.Object(properties2))
-        );
+        value.default = JSON.stringify(Value.Create(t.Object(properties2)));
         value.properties = properties2;
       }
-      if (items && v.type === "string" && v.format === "ArrayString" && v.default === "[]") {
+      if (
+        items &&
+        v.type === "string" &&
+        v.format === "ArrayString" &&
+        v.default === "[]"
+      ) {
         transform = t.ArrayString(items, rest);
         value.default = JSON.stringify(Value.Create(t.Array(items)));
         value.items = items;
@@ -244,21 +240,15 @@ const _replaceSchemaType = (schema, options, root = true) => {
       if (properties2) {
         const newProperties = {};
         for (const [key, value] of Object.entries(properties2))
-          newProperties[key] = _replaceSchemaType(
-            value,
-            options,
-            false
-          );
+          newProperties[key] = _replaceSchemaType(value, options, false);
         return {
           ...rest,
-          properties: newProperties
+          properties: newProperties,
         };
       } else if (items?.map)
         return {
           ...rest,
-          items: items.map(
-            (v) => _replaceSchemaType(v, options, false)
-          )
+          items: items.map((v) => _replaceSchemaType(v, options, false)),
         };
       return rest;
     }
@@ -277,27 +267,21 @@ const _replaceSchemaType = (schema, options, root = true) => {
     if (properties2) {
       const newProperties = {};
       for (const [key, value] of Object.entries(properties2))
-        newProperties[key] = _replaceSchemaType(
-          value,
-          options,
-          false
-        );
+        newProperties[key] = _replaceSchemaType(value, options, false);
       return {
         ...rest,
         ...to,
-        properties: newProperties
+        properties: newProperties,
       };
     } else if (items?.map)
       return {
         ...rest,
         ...to,
-        items: items.map(
-          (v) => _replaceSchemaType(v, options, false)
-        )
+        items: items.map((v) => _replaceSchemaType(v, options, false)),
       };
     return {
       ...rest,
-      ...to
+      ...to,
     };
   }
   const properties = schema?.properties;
@@ -320,7 +304,7 @@ const _replaceSchemaType = (schema, options, root = true) => {
           else if (to.not) to.not = { ...rest, ...to.not };
           properties[key] = {
             ...rest,
-            ..._replaceSchemaType(rest, options, false)
+            ..._replaceSchemaType(rest, options, false),
           };
           break;
         case "Object":
@@ -337,17 +321,9 @@ const _replaceSchemaType = (schema, options, root = true) => {
               );
             }
           } else if (value.anyOf || value.oneOf || value.allOf || value.not)
-            properties[key] = _replaceSchemaType(
-              value,
-              options,
-              false
-            );
+            properties[key] = _replaceSchemaType(value, options, false);
           else if (value.type === "array") {
-            value.items = _replaceSchemaType(
-              value.items,
-              options,
-              false
-            );
+            value.items = _replaceSchemaType(value.items, options, false);
           }
           break;
       }
@@ -367,17 +343,20 @@ const createCleaner = (schema) => (value) => {
     }
   return value;
 };
-const getSchemaValidator = (s, {
-  models = {},
-  dynamic = false,
-  modules,
-  normalize = false,
-  additionalProperties = false,
-  coerce = false,
-  additionalCoerce = []
-} = {
-  modules: t.Module({})
-}) => {
+const getSchemaValidator = (
+  s,
+  {
+    models = {},
+    dynamic = false,
+    modules,
+    normalize = false,
+    additionalProperties = false,
+    coerce = false,
+    additionalCoerce = [],
+  } = {
+    modules: t.Module({}),
+  }
+) => {
   if (!s) return void 0;
   let schema;
   if (typeof s !== "string") schema = s;
@@ -394,28 +373,32 @@ const getSchemaValidator = (s, {
         {
           from: t.Ref(""),
           // @ts-expect-error
-          to: (options) => modules.Import(options["$ref"])
+          to: (options) => modules.Import(options["$ref"]),
         },
         {
           from: t.Number(),
           to: (options) => t.Numeric(options),
-          untilObjectFound: true
+          untilObjectFound: true,
         },
         {
           from: t.Boolean(),
           to: (options) => t.BooleanString(options),
-          untilObjectFound: true
+          untilObjectFound: true,
         },
-        ...Array.isArray(additionalCoerce) ? additionalCoerce : [additionalCoerce]
+        ...(Array.isArray(additionalCoerce)
+          ? additionalCoerce
+          : [additionalCoerce]),
       ]);
     else {
       schema = replaceSchemaType(schema, [
         {
           from: t.Ref(""),
           // @ts-expect-error
-          to: (options) => modules.Import(options["$ref"])
+          to: (options) => modules.Import(options["$ref"]),
         },
-        ...Array.isArray(additionalCoerce) ? additionalCoerce : [additionalCoerce]
+        ...(Array.isArray(additionalCoerce)
+          ? additionalCoerce
+          : [additionalCoerce]),
       ]);
     }
   }
@@ -425,22 +408,20 @@ const getSchemaValidator = (s, {
     const validator = {
       schema,
       references: "",
-      checkFunc: () => {
-      },
+      checkFunc: () => {},
       code: "",
       Check: (value) => Value.Check(schema, value),
       Errors: (value) => Value.Errors(schema, value),
       Code: () => "",
       Clean: createCleaner(schema),
       Decode: (value) => Value.Decode(schema, value),
-      Encode: (value) => Value.Encode(schema, value)
+      Encode: (value) => Value.Encode(schema, value),
     };
     if (normalize && schema.additionalProperties === false)
       validator.Clean = createCleaner(schema);
     if (schema.config) {
       validator.config = schema.config;
-      if (validator?.schema?.config)
-        delete validator.schema.config;
+      if (validator?.schema?.config) delete validator.schema.config;
     }
     validator.parse = (v) => {
       try {
@@ -458,7 +439,7 @@ const getSchemaValidator = (s, {
           success: false,
           data: null,
           error: errors[0]?.summary,
-          errors
+          errors,
         };
       }
     };
@@ -468,8 +449,7 @@ const getSchemaValidator = (s, {
   compiled.Clean = createCleaner(schema);
   if (schema.config) {
     compiled.config = schema.config;
-    if (compiled?.schema?.config)
-      delete compiled.schema.config;
+    if (compiled?.schema?.config) delete compiled.schema.config;
   }
   compiled.parse = (v) => {
     try {
@@ -487,19 +467,22 @@ const getSchemaValidator = (s, {
         success: false,
         data: null,
         error: errors[0]?.summary,
-        errors
+        errors,
       };
     }
   };
   return compiled;
 };
-const getResponseSchemaValidator = (s, {
-  models = {},
-  modules,
-  dynamic = false,
-  normalize = false,
-  additionalProperties = false
-}) => {
+const getResponseSchemaValidator = (
+  s,
+  {
+    models = {},
+    modules,
+    dynamic = false,
+    normalize = false,
+    additionalProperties = false,
+  }
+) => {
   if (!s) return;
   let maybeSchemaOrRecord;
   if (typeof s !== "string") maybeSchemaOrRecord = s;
@@ -507,8 +490,7 @@ const getResponseSchemaValidator = (s, {
     const isArray = s.endsWith("[]");
     const key = isArray ? s.substring(0, s.length - 2) : s;
     maybeSchemaOrRecord = modules.Import(key) ?? models[key];
-    if (isArray)
-      maybeSchemaOrRecord = t.Array(maybeSchemaOrRecord);
+    if (isArray) maybeSchemaOrRecord = t.Array(maybeSchemaOrRecord);
   }
   if (!maybeSchemaOrRecord) return;
   const compile = (schema, references) => {
@@ -516,15 +498,14 @@ const getResponseSchemaValidator = (s, {
       return {
         schema,
         references: "",
-        checkFunc: () => {
-        },
+        checkFunc: () => {},
         code: "",
         Check: (value) => Value.Check(schema, value),
         Errors: (value) => Value.Errors(schema, value),
         Code: () => "",
         Clean: createCleaner(schema),
         Decode: (value) => Value.Decode(schema, value),
-        Encode: (value) => Value.Encode(schema, value)
+        Encode: (value) => Value.Encode(schema, value),
       };
     const compiledValidator = TypeCompiler.Compile(schema, references);
     if (normalize && schema.additionalProperties === false)
@@ -536,7 +517,7 @@ const getResponseSchemaValidator = (s, {
     if ("additionalProperties" in maybeSchemaOrRecord === false)
       maybeSchemaOrRecord.additionalProperties = additionalProperties;
     return {
-      200: compile(maybeSchemaOrRecord, modelValues)
+      200: compile(maybeSchemaOrRecord, modelValues),
     };
   }
   const record = {};
@@ -546,13 +527,20 @@ const getResponseSchemaValidator = (s, {
       if (maybeNameOrSchema in models) {
         const schema = models[maybeNameOrSchema];
         schema.type === "object" && "additionalProperties" in schema === false;
-        record[+status] = Kind in schema ? compile(schema, modelValues) : schema;
+        record[+status] =
+          Kind in schema ? compile(schema, modelValues) : schema;
       }
       return void 0;
     }
-    if (maybeNameOrSchema.type === "object" && "additionalProperties" in maybeNameOrSchema === false)
+    if (
+      maybeNameOrSchema.type === "object" &&
+      "additionalProperties" in maybeNameOrSchema === false
+    )
       maybeNameOrSchema.additionalProperties = additionalProperties;
-    record[+status] = Kind in maybeNameOrSchema ? compile(maybeNameOrSchema, modelValues) : maybeNameOrSchema;
+    record[+status] =
+      Kind in maybeNameOrSchema
+        ? compile(maybeNameOrSchema, modelValues)
+        : maybeNameOrSchema;
   });
   return record;
 };
@@ -562,7 +550,7 @@ const checksum = (s) => {
   if (hasHash) return Bun.hash(s);
   let h = 9;
   for (let i = 0; i < s.length; ) h = Math.imul(h ^ s.charCodeAt(i++), 9 ** 9);
-  return h = h ^ h >>> 9;
+  return (h = h ^ (h >>> 9));
 };
 let _stringToStructureCoercions;
 const stringToStructureCoercions = () => {
@@ -571,12 +559,12 @@ const stringToStructureCoercions = () => {
       {
         from: t.Object({}),
         to: () => t.ObjectString({}),
-        excludeRoot: true
+        excludeRoot: true,
       },
       {
         from: t.Array(t.Any()),
-        to: () => t.ArrayString(t.Any())
-      }
+        to: () => t.ArrayString(t.Any()),
+      },
     ];
   }
   return _stringToStructureCoercions;
@@ -588,13 +576,13 @@ const coercePrimitiveRoot = () => {
       {
         from: t.Number(),
         to: (options) => t.Numeric(options),
-        rootOnly: true
+        rootOnly: true,
       },
       {
         from: t.Boolean(),
         to: (options) => t.BooleanString(options),
-        rootOnly: true
-      }
+        rootOnly: true,
+      },
     ];
   return _coercePrimitiveRoot;
 };
@@ -604,7 +592,7 @@ const getCookieValidator = ({
   defaultConfig = {},
   config,
   dynamic,
-  models
+  models,
 }) => {
   let cookieValidator = getSchemaValidator(validator, {
     modules,
@@ -612,7 +600,7 @@ const getCookieValidator = ({
     models,
     additionalProperties: true,
     coerce: true,
-    additionalCoerce: stringToStructureCoercions()
+    additionalCoerce: stringToStructureCoercions(),
   });
   if (isNotEmpty(defaultConfig)) {
     if (cookieValidator) {
@@ -626,7 +614,7 @@ const getCookieValidator = ({
         modules,
         dynamic,
         models,
-        additionalProperties: true
+        additionalProperties: true,
       });
       cookieValidator.config = defaultConfig;
     }
@@ -650,18 +638,9 @@ const injectChecksum = (checksum2, x) => {
 };
 const mergeLifeCycle = (a, b, checksum2) => {
   return {
-    start: mergeObjectArray(
-      a.start,
-      injectChecksum(checksum2, b?.start)
-    ),
-    request: mergeObjectArray(
-      a.request,
-      injectChecksum(checksum2, b?.request)
-    ),
-    parse: mergeObjectArray(
-      a.parse,
-      injectChecksum(checksum2, b?.parse)
-    ),
+    start: mergeObjectArray(a.start, injectChecksum(checksum2, b?.start)),
+    request: mergeObjectArray(a.request, injectChecksum(checksum2, b?.request)),
+    parse: mergeObjectArray(a.parse, injectChecksum(checksum2, b?.parse)),
     transform: mergeObjectArray(
       a.transform,
       injectChecksum(checksum2, b?.transform)
@@ -674,10 +653,7 @@ const mergeLifeCycle = (a, b, checksum2) => {
       ),
       injectChecksum(
         checksum2,
-        mergeObjectArray(
-          fnToContainer(b?.resolve, "resolve"),
-          b?.beforeHandle
-        )
+        mergeObjectArray(fnToContainer(b?.resolve, "resolve"), b?.beforeHandle)
       )
     ),
     afterHandle: mergeObjectArray(
@@ -693,18 +669,9 @@ const mergeLifeCycle = (a, b, checksum2) => {
       injectChecksum(checksum2, b?.afterResponse)
     ),
     // Already merged on Elysia._use, also logic is more complicated, can't directly merge
-    trace: mergeObjectArray(
-      a.trace,
-      injectChecksum(checksum2, b?.trace)
-    ),
-    error: mergeObjectArray(
-      a.error,
-      injectChecksum(checksum2, b?.error)
-    ),
-    stop: mergeObjectArray(
-      a.stop,
-      injectChecksum(checksum2, b?.stop)
-    )
+    trace: mergeObjectArray(a.trace, injectChecksum(checksum2, b?.trace)),
+    error: mergeObjectArray(a.error, injectChecksum(checksum2, b?.error)),
+    stop: mergeObjectArray(a.stop, injectChecksum(checksum2, b?.stop)),
   };
 };
 const asHookType = (fn, inject, { skipIfHasType = false } = {}) => {
@@ -735,7 +702,7 @@ const filterGlobal = (fn) => {
       case "global":
       case "scoped":
         array.push({
-          ...x
+          ...x,
         });
         break;
     }
@@ -754,7 +721,7 @@ const filterGlobalHook = (hook) => {
     mapResponse: filterGlobal(hook?.mapResponse),
     afterResponse: filterGlobal(hook?.afterResponse),
     error: filterGlobal(hook?.error),
-    trace: filterGlobal(hook?.trace)
+    trace: filterGlobal(hook?.trace),
   };
 };
 const StatusMap = {
@@ -817,7 +784,7 @@ const StatusMap = {
   "Insufficient Storage": 507,
   "Loop Detected": 508,
   "Not Extended": 510,
-  "Network Authentication Required": 511
+  "Network Authentication Required": 511,
 };
 const InvertedStatusMap = Object.fromEntries(
   Object.entries(StatusMap).map(([k, v]) => [v, k])
@@ -846,7 +813,9 @@ const signCookie = async (val, secret) => {
     secretKey,
     encoder.encode(val)
   );
-  return val + "." + removeTrailingEquals(Buffer.from(hmacBuffer).toString("base64"));
+  return (
+    val + "." + removeTrailingEquals(Buffer.from(hmacBuffer).toString("base64"))
+  );
 };
 const unsignCookie = async (input, secret) => {
   if (typeof input !== "string")
@@ -866,7 +835,7 @@ const traceBackMacro = (extension, property, manage) => {
       if (typeof hook === "object") {
         for (const [k, v2] of Object.entries(hook)) {
           manage(k)({
-            fn: v2
+            fn: v2,
           });
         }
       }
@@ -874,70 +843,64 @@ const traceBackMacro = (extension, property, manage) => {
     delete property[key];
   }
 };
-const createMacroManager = ({
-  globalHook,
-  localHook
-}) => (stackName) => (type, fn) => {
-  if (typeof type === "function")
-    type = {
-      fn: type
-    };
-  if (stackName === "resolve") {
-    type = {
-      ...type,
-      subType: "resolve"
-    };
-  }
-  if ("fn" in type || Array.isArray(type)) {
-    if (!localHook[stackName]) localHook[stackName] = [];
-    if (typeof localHook[stackName] === "function")
-      localHook[stackName] = [localHook[stackName]];
-    if (Array.isArray(type))
-      localHook[stackName] = localHook[stackName].concat(type);
-    else localHook[stackName].push(type);
-    return;
-  }
-  const { insert = "after", stack = "local" } = type;
-  if (typeof fn === "function") fn = { fn };
-  if (stack === "global") {
-    if (!Array.isArray(fn)) {
-      if (insert === "before") {
-        ;
-        globalHook[stackName].unshift(fn);
-      } else {
-        ;
-        globalHook[stackName].push(fn);
-      }
-    } else {
-      if (insert === "before") {
-        globalHook[stackName] = fn.concat(
-          globalHook[stackName]
-        );
-      } else {
-        globalHook[stackName] = globalHook[stackName].concat(fn);
-      }
+const createMacroManager =
+  ({ globalHook, localHook }) =>
+  (stackName) =>
+  (type, fn) => {
+    if (typeof type === "function")
+      type = {
+        fn: type,
+      };
+    if (stackName === "resolve") {
+      type = {
+        ...type,
+        subType: "resolve",
+      };
     }
-  } else {
-    if (!localHook[stackName]) localHook[stackName] = [];
-    if (typeof localHook[stackName] === "function")
-      localHook[stackName] = [localHook[stackName]];
-    if (!Array.isArray(fn)) {
-      if (insert === "before") {
-        ;
-        localHook[stackName].unshift(fn);
+    if ("fn" in type || Array.isArray(type)) {
+      if (!localHook[stackName]) localHook[stackName] = [];
+      if (typeof localHook[stackName] === "function")
+        localHook[stackName] = [localHook[stackName]];
+      if (Array.isArray(type))
+        localHook[stackName] = localHook[stackName].concat(type);
+      else localHook[stackName].push(type);
+      return;
+    }
+    const { insert = "after", stack = "local" } = type;
+    if (typeof fn === "function") fn = { fn };
+    if (stack === "global") {
+      if (!Array.isArray(fn)) {
+        if (insert === "before") {
+          globalHook[stackName].unshift(fn);
+        } else {
+          globalHook[stackName].push(fn);
+        }
       } else {
-        ;
-        localHook[stackName].push(fn);
+        if (insert === "before") {
+          globalHook[stackName] = fn.concat(globalHook[stackName]);
+        } else {
+          globalHook[stackName] = globalHook[stackName].concat(fn);
+        }
       }
     } else {
-      if (insert === "before") {
-        localHook[stackName] = fn.concat(localHook[stackName]);
+      if (!localHook[stackName]) localHook[stackName] = [];
+      if (typeof localHook[stackName] === "function")
+        localHook[stackName] = [localHook[stackName]];
+      if (!Array.isArray(fn)) {
+        if (insert === "before") {
+          localHook[stackName].unshift(fn);
+        } else {
+          localHook[stackName].push(fn);
+        }
       } else {
-        localHook[stackName] = localHook[stackName].concat(fn);
+        if (insert === "before") {
+          localHook[stackName] = fn.concat(localHook[stackName]);
+        } else {
+          localHook[stackName] = localHook[stackName].concat(fn);
+        }
       }
     }
-  }
-};
+  };
 const parseNumericString = (message) => {
   if (typeof message === "number") return message;
   if (message.length < 16) {
@@ -1020,7 +983,7 @@ const localHookToLifeCycleStore = (a) => {
     afterResponse: fnToContainer(a?.afterResponse),
     trace: fnToContainer(a?.trace),
     error: fnToContainer(a?.error),
-    stop: fnToContainer(a?.stop)
+    stop: fnToContainer(a?.stop),
   };
 };
 const lifeCycleToFn = (a) => {
@@ -1047,9 +1010,12 @@ const cloneInference = (inference) => ({
   set: inference.set,
   server: inference.server,
   request: inference.request,
-  route: inference.route
+  route: inference.route,
 });
-const redirect = (url, status = 302) => Response.redirect(url, status);
+const redirect = (url, status = 302) => {
+  const _res = Response.redirect(url, status);
+  return new Response(_res.body, _res);
+};
 const ELYSIA_FORM_DATA = Symbol("ElysiaFormData");
 const ELYSIA_REQUEST_ID = Symbol("ElysiaRequestId");
 const form = (items) => {
@@ -1057,8 +1023,7 @@ const form = (items) => {
   for (const [key, value] of Object.entries(items)) {
     if (Array.isArray(value)) {
       for (const v of value) {
-        if (value instanceof File)
-          formData.append(key, value, value.name);
+        if (value instanceof File) formData.append(key, value, value.name);
         formData.append(key, v);
       }
       continue;
@@ -1090,8 +1055,7 @@ const promoteEvent = (events, as = "scoped") => {
   if (!events) return;
   if (as === "scoped") {
     for (const event of events)
-      if ("scope" in event && event.scope === "local")
-        event.scope = "scoped";
+      if ("scope" in event && event.scope === "local") event.scope = "scoped";
     return;
   }
   for (const event of events) if ("scope" in event) event.scope = "global";
@@ -1205,5 +1169,5 @@ export {
   signCookie,
   stringToStructureCoercions,
   traceBackMacro,
-  unsignCookie
+  unsignCookie,
 };
