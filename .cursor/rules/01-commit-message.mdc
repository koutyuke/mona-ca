---
alwaysApply: false
---
# **Commit Message Context**

**[重要]**

- Generate Commit Messageではこのコンテキストを使用して生成すること
- リポジトリ内でのルールがない場合、コミットメッセージはこの形式に従うこと
- 日本語は使用せずに全て英語で作成する

## **Dynamic Template**

`{type}({scope}){breaking_change_exclamation}: {description}`

## **type**

- 変更の種類
- `{emoji} {label}`
- 以下の中から使用すること

| emoji | label | description |
| --- | --- | --- |
| ✨ | `feat` | 新機能の実装 |
| 🎈 | `feat` | 機能の改善・更新 |
| 🪦 | `feat` | 機能の削除 |
| 📝 | `doc` | ドキュメント変更 |
| 💄 | `style` | スタイル調整（フォーマット、空白、typo など） |
| ♻️ | `refactor` | リファクタリング |
| 🏎️ | `perf` | パフォーマンス向上 |
| 🧪 | `test` | テストコードの追加・修正 |
| 📦️ | `build` | ビルドや依存変更 |
| 🔧 | `chore` | その他の変更 |
| 📦 | `chore` | 依存関係の更新 |
| 🗑 | `chore` | 不要ファイルやコードの削除 |
| 🎉  | `initial` | 最初のコミット |

## **breaking_change_exclamation**

- `!`: 破壊的変更であることを示す記号
- 破壊的な変更でない場合は記述しない

## **scope**

- 変更対象の範囲
- 基本的には 3 階層まで(それより小さくなる分には問題ない)
- `{application}/{layer}/{detail}`
  - `application`: アプリケーションの分類. (例: api, mobile, web)
  - `layer`: アーキテクチャのレイヤーの分類. 基本的にディレクトにあるものを使用する. (例: domain, models, features)
  - `detail`: エンティティなどの分類. 基本的にディレクトリにある. (例: user, order, menu)

## **description**

- コミットの簡潔な説明
- 64 字以内
- 英語で記述する

## **example**

- `🎈 feat(api/common/constant): add client type constant header and update session expires`
- `♻️ refactor(api/repository/session):  remove unused SessionConstructor type from session repository interface`
- `✨ feat(api/repositories/password-reset-session)!: add PasswordResetSession repository and interface for password reset functionality`
